CHAPTER-8:Session Management
---------------------------------------------------
-->Client and Server can communicate with some common language which is nothing but HTTP.
-->The basic limitation of HTTP is it is a stateless protocol. i.e it is unable to remember client information for future purpose across multiple requests. Every request to the server is treated as new request only.
-->To remember client information at server side, some special mechanism must be required which is nothing but session management mechanism.

Different session management mechanisms are:
					1).Cookies
					2).Session API

Session management by using Cookies:
------------------------------------------------------------
-->Cookies is a very small amunt of information created by server and maintained by client. Cookies are key-value pairs.
		RMP Doctor example

To add cookies to the response:
	response.set_cookie(cname,value)

To get cookies send by client:
	request.COOKIES[cname]
	request.COOKIES.get(cname)
	request.COOKIES.get(cname,defaultvalue)

Ex:Page Count Application
-----------------------------------------
django-admin startproject pagecountproject
py manage.py startapp testapp
Add app in settings.py

views.py
-------------
def page_count_view(request):
    print('Cookies from the client:',request.COOKIES)
    count = int(request.COOKIES.get('count',0))
    count += 1
    response =  render(request,'testapp/counter.html',{'count':count})
    response.set_cookie('count',count)
    return response

counter.html
--------------------
<body>
    <h1>The Page Count:<span>{{count}}</span></h1>
</body>

Client is sending the first request:
---------------------------------------------------
-->What information required for future purpose, server will decide, with that information, server will create cookie and it should be handover to the client. Response will be send to client.
-->Server will add cookie to the response then automatically cookie will be reached to the client.

sessionproject2:
------------------------
django-admin startproject sessionproject2
py manage.py startapp testapp
Add app in settings.py

forms.py
-------------
from django import forms
class LoginForm(forms.Form):
    name = forms.CharField()

views.py
------------
from testapp.forms import LoginForm
def home_view(request):
    form = LoginForm()
    return render(request,'testapp/home.html',{'form':form})

home.html
-----------------
<body>
    <h1>Welcome To Naresh IT</h1>
    <form action="" >
        {{form.as_p}}
        {% csrf_token %}
        <input type="submit" value="Enter Name">
    </form>
</body>

urls.py:
	path('home/',views.home_view)

views.py
-------------
def date_time_view(request):
    name = request.GET['name']
    respnse = render(request,'testapp/datetime.html',{'name':name})
    respnse.set_cookie('name',name)
    return respnse

datetime.html
----------------------
<body>
  <h1>Hello {{name}}</h1>
  <a href="#">Click Here To Get The Date & Time</a>
</body>

urls.py:
	path('second/',views.date_time_view)

home.html
-----------------
<form action="/second" >


2/5/25(Session Management)
Mahesh Python
â€¢
Yesterday

django.txt
Text
Class comments
views.py
------------
import datetime
def result_view(request):
    name = request.COOKIES.get('name')
    date = datetime.datetime.now()
    return render(request,'testapp/results.html',{'name':name,'date':date})

results.html
------------------
<body>
  <h1>Hello {{name}}</h1>
  <h1>Current Date and Time:{{date}}</h1>
  <a href="/results">Click here to updated time</a>
</body>

urls.py:
	path('results/',views.result_view)

datetime.html, results.html
-------------------------------------------
<a href="/results">Click Here To Get The Date & Time</a>
<a href="/results">Click here to updated time</a>

sessionproject3
==============
django-admin startproject sessionproject3
py manage.py startapp testapp
Add ap in setings.py

views.py
-------------
def home_view(request):
    return render(request,'testapp/home.html')

home.html
-----------------
<body>
  <h1>Welcome To NARESH IT</h1>
  <form action="">
    Enter Name:<input type="text" name="name"><br><br>
      <input type="submit" value="Submit Name">
  </form>
</body>

urls.py:
	path('home/',views.home_view)

views.py
-------------
def age_view(request):
    print(request.COOKIES)
    name = request.GET['name']
    response = render(request,'testapp/age.html',{'name':name})
    response.set_cookie('name',name)
    return response

age.html
-------------
<body>
    <h1>Hello {{name}}</h1>
    <form action="">
    Enter Age:<input type="text" name="age"><br><br>
    <input type="submit" value="Submit Age">
    </form>
</body>

urls.py:
	path('age/',views.age_view)

views.py
-------------
def gf_view(request):
    print(request.COOKIES)
    name = request.COOKIES['name']
    age = request.GET['age']
    response = render(request,'testapp/gf.html',{'name':name})
    response.set_cookie('age',age)
    return response

gf.html
-----------
<body>
  <h1>Hello {{name}}</h1>
    <form action="">
    Enter GF Name:<input type="text" name="gf"><br><br>
    <input type="submit" value="Submit GF Name">
    </form>
</body>

urls.py:
	path('gf/',views.gf_view)

views.py
-------------
def result_view(request):
    print(request.COOKIES)
    name = request.COOKIES['name']
    age = request.COOKIES['age']
    gf = request.GET['gf']
    return render(request,'testapp/results.html',{'name':name,'age':age,'gf':gf})

results.html
-------------------
<body>
    <h1>Hello {{name}}, Thanks for providing information</h1>
    <h2>Please cross check your data and confirm</h2>
    <ul>
        <li>Name:{{name}}</li>
        <li>Age:{{age}}</li>
        <li>GF Name:{{gf}}</li>
    </ul>
</body>

urls.py:
	path('results/',views.result_view)

Temporary vs Permanent cookies:
---------------------------------------------------
If we are not setting max_age for the cookies, then the cookies will be stored in browsers cache. Once we close the browser, automatically the cookies will be expired. Such type of cookies are called as temporary cookies.

We can create temporary cookies:
	response.set_cookies(name,value)

If we set the max_age for the cookies, then cookies will be stored in local file system permanently. Once the specified max_age expired then only cookies will be expired-->Permanent cookies or Persistent cookies.

We can create permanent cookies:
	response.set_cookies(name,value,120)

sessionproject-4:
-------------------------
django-admin startproject sessionproject4
py manage.py startapp testapp
Add app in settings.py
makemigrations and migrate

views.py
-------------
def index_view(request):
    return render(request,'testapp/home.html')

home.html
-----------------
<body>
  <div class="container">
    <div class="jumbotron" align="center">
      <h1>MAHESH ONLINE SHOPPING APP</h1>
      <a class="btn btn-primary" href="#">ADD Item</a>
      <a class="btn btn-primary" href="#">Display Items</a>
    </div>
  </div>
</body>

urls.py:
	path('',views.index_view)

forms.py
-------------
from django import forms
class AddItemForm(forms.Form):
    itemname = forms.CharField()
    quantity = forms.IntegerField()

views.py
------------
from testapp.forms import AddItemForm
def additem_view(request):
    form = AddItemForm()
    response = render(request,'testapp/additem.html',{'form':form})
    if request.method == 'POST':
        form = AddItemForm(request.POST)
        if form.is_valid():
            name = form.cleaned_data['itemname']
            quantity = form.cleaned_data['quantity']
            response.set_cookies(name,quantity)
    return response

additem.html
--------------------
<body>
  <div class="container" align="center">
    <h1>Add Item Form</h1>
    <form method="post">
      {{form.as_p}}
      {% csrf_token %}
      <input type="submit" value="Add Item">
    </form>
  </div>
</body>

urls.py:
	path('additem/',views.additem_view)

views.py
-------------
def display_items_view(request):
    return render(request,'testapp/displayitems.html')

displayitems.html
---------------------------
<body>
    <h1>Shopping Cart Items</h1>
    {% if request.COOKIES %}
        <table border="3">
            <thead>
                <th>Item Name</th>
                <th>Quantity</th>
            </thead>
        {% for key,value in request.COOKIES.items %}
        {% if key != 'csrftoken' %}
            <tr>
                <td>{{key}}</td>
                <td>{{value}}</td>
            </tr>
        {% endif %}
        {% endfor %}
        </table>
    {% else %}
    <p>No items in the shopping cart</p>
    {% endif %}
</body>

urls.py
-----------
	path('display/', views.display_items_view),

Limitations of Cookies:
-----------------------------------
1).By using cookies we can store very less amount of information. The size of cookies is fixed. Hence if we want to store huge amount of information then cookies is not bes choice.
2).Cookies information is stored on client side and hence there is no security.
3).Every time with every request, browser will send all cookies related to that application, which creates network traffic problems.
4).There is a limit of max number of cookies supported by browser.

		To overcome these limitations, we should go for Session Framework.

Session management by using session API(Django Session Framewrk)
---------------------------------------------------------------------------------------------------------
Cookies--->RMP Doctor
Session Framework--->Bank Locker--->Super speciality hospital

Useful methods in session management:
-------------------------------------------------------------
1).To add data to session:
		request.session['key'] = value

2).To get the value from the session
		value = request.session['key']

3).request.session.set_expiry(seconds)
		set expiry time for the session

4).request.session.get_expiry_age()
		Returns expiry age in seconds seconds(the number of seconds until this session expires)

5).request.session.get_expiry_date()
		Returns the date on which session will be expired.

sessionproject-5
------------------------
django-admin startproject sessionproject5
py manage.py startapp testapp
Add app in settings.py
makemigrations and migrate

views.py
-------------
def page_count_view(request):
    print(request.COOKIES)
    count = request.session.get('count',0)
    count += 1
    request.session['count'] = count
    request.session.set_expiry(120)
    print(request.session.get_expiry_age())
    print(request.session.get_expiry_date())
    return render(request,'testapp/page.html',{'count':count})

page.html
----------------
<body>
    <h1>The page count:<span>{{count}}</span></h1>
</body>

urls.py:
	path('page/',views.page_count_view)

Note:
	1).request.session.set_expiry(120)-->2 mins session will expires
	2).request.session.set_expiry(0)-->Once we close the browser automatically session will be expired.

sessionproject-6:
--------------------------
Profile Application:
-----------------------------
django-admin startproject sessionproject6
py manage.py startapp testapp
Add app in settings.py
makemigrations and migrate

forms.py
-------------
from django import forms
class NameForm(forms.Form):
    name = forms.CharField()

views.py
------------
from testapp.forms import NameForm
def name_view(request):
    form = NameForm()
    return render(request,'testapp/name.html',{'form':form})

name.html
----------------
<body>
  <h1>Name Registration Form</h1>
  <form action="">
      {{form.as_p}}
      {% csrf_token %}
      <input type="submit" value="Submit Name">
  </form>
</body>

urls.py:
	path('name/',views.name_view)

forms.py
------------
class AgeForm(forms.Form):
    age = forms.IntegerField()

views.py
------------
def age_view(request):
    name = request.GET['name']
    request.session['name'] = name
    form = AgeForm()
    return render(request,'testapp/age.html',{'form':form,'name':name})

age.html
-------------
<body>
  <h1>Hello {{name}}, Provide Age</h1>
  <form action="">
      {{form.as_p}}
      {% csrf_token %}
      <input type="submit" value="Submit Age">
  </form>
</body>

urls.py:
	path('age/',views.age_view)

forms.py
-------------
class GfForm(forms.Form):
    gf = forms.CharField()

views.py
-------------
def gf_view(request):
    age = request.GET['age']
    request.session['age'] = age
    name = request.session['name']
    form = GfForm()
    return render(request, 'testapp/gf.html', {'form': form, 'name': name})

gf.html
-----------
<body>
  <h1>Hello {{name}}, Provide GF Name</h1>
  <form action="">
      {{form.as_p}}
      {% csrf_token %}
      <input type="submit" value="Submit GF Name">
  </form>
</body>

urls.py:
	path('gf/',views.gf_view)

views.py
-------------
def results_view(request):
    gf = request.GET['gf']
    request.session['gf'] = gf
    name = request.session['name']
    age = request.session['age']
    return render(request,'testapp/results.html')

results.html
------------------
<body>
    {% if request.session %}
    <h1>Thanks for providing information...Please confirm once</h1>
    <ul>
        {% for key,value in request.session.items %}
        <li>{{key | upper}}:{{value | title}}</li>
        {% endfor %}
    </ul>
    {% else %}
    <h1>No information available</h1>
    {% endif %}
</body>

urls.py:
	path('path/',views.results_view)