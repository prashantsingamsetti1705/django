
CHAPTER-9:User Authentication and Authorization
==============================================
1).Authentication:The process of validating user.
2).Authorization:The process of validating access permission of a user.

auth application
-------------------------
1).django.contrib.auth
2).django.contrib.contenttypes

Demo application for Authentication
--------------------------------------------------------
django-admin startproject authproject
py manage.py startapp testapp
Add app in settings.py

base.html
---------------
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
      <div class="container">
        <a class="navbar-brand" href="/">MAHESHEXAMS</a>
        <ul class="navbar-nav mr-auto">
          <li class="nav-item active">
            <a class="nav-link" href="/">Home <span class="sr-only"></span></a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#">Java Exams</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#">Python Exams</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#">Aptitude Exams</a>
          </li>
        </ul>
        <ul class="navbar-nav ml-auto">
          <li class="nav-item">
            <a class="nav-link" href="#">Signup</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#">Login</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#">Logout</a>
          </li>
          </ul>
      </div>
    </nav>
      {% block body_block %}
      {% endblock %}
  </body>

views.py
-----------
def home_page_view(request):
    return render(request,'testapp/home.html')

home.html
-----------------
<!DOCTYPE html>
{% extends 'testapp/base.html' %}
{% block body_block %}
<div class="jumbotron">
    <div class="container">
        <h1>Welcome To MAHESH EXAMS</h1>
        <h2>Rules:</h2>
        <ul>
            <li>Rule-1:You should write only one exam per day</li>
        </ul>
    </div>
</div>
{% endblock %}

urls.py: path('',views.home_page_view)

views.py
-------------
def java_page_view(request):
    return render(request,'testapp/javaexams.html')

javaexams.html
------------------------
<!DOCTYPE html>
{% extends 'testapp/base.html' %}
{% block body_block %}
<div class="jumbotron">
    <div class="container" align="center">
        <h1>Welcome To Java Exams</h1>
    </div>
</div>
{% endblock %}

urls.py: path('java/',views.java_page_view)

views.py
-------------
def python_page_view(request):
    return render(request,'testapp/pythonexams.html')

pythonexams.html
-----------------------------
<!DOCTYPE html>
{% extends 'testapp/base.html' %}
{% block body_block %}
<div class="jumbotron">
    <div class="container" align="center">
        <h1>Welcome To Python Exams</h1>
    </div>
</div>
{% endblock %}

urls.py: path('python/',views.python_page_view)

views.py
------------
def aptitude_page_view(request):
    return render(request,'testapp/aptitudeexams.html')

aptitudeexams.html
-------------------------------
<!DOCTYPE html>
{% extends 'testapp/base.html' %}
{% block body_block %}
<div class="jumbotron">
    <div class="container" align="center">
        <h1>Welcome To Aptitude Exams</h1>
    </div>
</div>
{% endblock %}

urls.py: path('aptitude/',views.aptitude_page_view)

views.py
-------------
from django.contrib.auth.decorators import login_required
@login_required
def java_page_view(request):
	------
	------

Problem-1:
----------------
Page not found (404)
Request Method:	GET
Request URL:	http://127.0.0.1:8000/accounts/login/?next=/java/

Solved this problem by including auth application url's

urls.py
----------
path('accounts/', include('django.contrib.auth.urls'))

Problem-2:
----------------
TemplateDoesNotExist at /accounts/login/
registration/login.html

-->Create a folder under 'templates' with the name of 'registration' and create a file login.html

login.html
----------------
<!DOCTYPE html>
{% extends 'testapp/base.html' %}
{% block body_block %}
<div class="jumbotron">
    <div class="container" align="center">
        <h1>Please Login To Write Exams.....</h1>
      <form method="post">
        {{form.as_p}}
        {% csrf_token %}
        <input type="submit" value="Login">
      </form>
    </div>
</div>
{% endblock %}

-->makemigrations and migrate
Implementing login functionality:
---------------------------------------------------
Note:
		login page url pattern from auth application:/accounts/login

Requested URL:http://127.0.0.1:8000/accounts/login/?next=/java/

If we click login button, after login the next page is profile page bydefault.
If we want to configure our own destination page, we have to write a line in settings.py.
						LOGIN_REDIRECT_URL = '/'

Step-1:base.html
			<a class="nav-link" href="/accounts/login">Login</a>

Step-2:Configure destination page inside settings.py
			LOGIN_REDIRECT_URL = '/'

-->After getting home page then we acceess all pages without login.					

Implementing logout functionaity:
----------------------------------------------------
Step-1:Update logout in base.html
		 <a class="nav-link" href="/accounts/logout">Logout</a>

Step-2:The default destination page for logout is admin logout page.
		We can configure our own logout destination page
						LOGOUT_REDIRECT_URL = '/'
		Here logout destination page:home page(/)			

Defining separate logout destination page:
-----------------------------------------------------------------
views.py
-------------
def logout_view(request):
    return render(request,'testapp/logout.html')

logout.html
------------------
<!DOCTYPE html>
{% extends 'testapp/base.html' %}
{% block body_block %}
<div class="jumbotron">
    <div class="container" align="center">
        <h1>Thanks for using MAHESHEXAMS</h1>
        <p>Anyway we are feeling very sad bcoz you logout, atleast 24-hrs 
		per day you have to use our app</p>
        <h2>Please login again to enjoy......</h2>
        <a href="/accounts/login" class="btn btn-success">Login</a>
    </div>
</div>
{% endblock %}

urls.py:
	path('logout/',views.logout_view)

settings.py: LOGOUT_REDIRECT_URL = '/logout'

Implementing signup button functionality:
----------------------------------------------------------------
-->auth application having form class to provide login form.
-->But auth application does not contain any form class for signup functionality.
-->If a user signup, compulsory that information should be stored in DB(User table)

-->Display form to signup and that information should be stored inside database directly. For such type of requirement it is highly recommended to go for model based form.

forms.py
--------------
from django import forms
from django.contrib.auth.models import User
class SignUpForm(forms.ModelForm):
    class Meta:
        model = User
        fields = ['username','password','email','first_name','last_name']
 
views.py
-------------
from testapp.forms import SignUpForm
def signup_view(request):
    form = SignUpForm()
    return render(request,'testapp/signup.html',{'form':form})

signup.html
------------------
<!DOCTYPE html>
{% extends 'testapp/base.html' %}
{% block body_block %}
<div class="jumbotron">
    <div class="container">
        <h1>Please SignUp To Write Exams.....</h1>
      <form method="post">
        {{form.as_p}}
        {% csrf_token %}
        <input type="submit" value="SignUp">
      </form>
    </div>
</div>
{% endblock %}

urls.py: path('signup/',views.signup_view)

base.html: <a class="nav-link" href="/signup">Signup</a>

views.py
------------
if request.method == 'POST':
	form = SignUpForm(request.POST)
    form.save()

-->In django auth application, User model, the password should not be saved directly. It should be hashed by using some security algorithm. The default password hashing algorithm:pbkdf2_sha256

form.save():We are trying to save password in the plain text form
		Invalid password format or unknown hashing algorithm.

views.py
-------------
if request.method == 'POST':
	form = SignUpForm(request.POST)
    user = form.save()
    user.set_password(user.password)#To hash password
    user.save()
    return HttpResponseRedirect('/accounts/login')

Password Hashers:
-----------------------------

DJANGO @ 4:00 PM | Mr.Mahesh [24th March]
Mr.Mahesh
Upcoming
Woohoo, no work due in soon!
Material
Mahesh Python posted a new material: 10/5/25(FBVs)
Posted 10 May

django.txt
Text
Material
Mahesh Python posted a new material: 9/5/25(CRUD operations by FBV's)
Posted 9 May

django.txt
Text
Material
Mahesh Python posted a new material: 8/5/25(Authentication & Authorization)
Posted 8 May

django.txt
Text
Material
Mahesh Python posted a new material: 7/5/25(Authentication & Authorization)
Posted 7 May

django.txt
Text
Material
Mahesh Python posted a new material: 6/5/25(Session Management)
Posted 6 May

django.txt
Text
Material
Mahesh Python posted a new material: 5/5/25(Session Management)
Posted 5 May

django.txt
Text
Material
Mahesh Python posted a new material: 2/5/25(Session Management)
Posted 2 May

django.txt
Text
Material
Mahesh Python posted a new material: 1/5/25(Session Management)
Posted 1 May

django.txt
Text
Material
Mahesh Python posted a new material: 30/4/25(Template Filters)
Posted 30 Apr

django.txt
Text
Material
Mahesh Python posted a new material: 29/4/25(Template Inheritance)
Posted 29 Apr

django.txt
Text
Material
Mahesh Python posted a new material: 28/4/25(Model Form)
Posted 28 Apr

django.txt
Text

Announcement: 'Hi, There is No Class Today [26-04-2025]'
Naresh Technologies
Created 26 Apr26 Apr
Hi,

There is No Class Today [26-04-2025]

Announcement: 'Hi, There is No Class Today [25-04-2025]'
Naresh Technologies
Created 25 Apr25 Apr
Hi,

There is No Class Today [25-04-2025]
Material
Mahesh Python posted a new material: 24/4/25(Model Based Form)
Posted 24 Apr

django.txt
Text
Material
Mahesh Python posted a new material: 23/4/25(Django Forms)
Posted 23 Apr

django.txt
Text
Material
Mahesh Python posted a new material: 22/4/25(Form Validations)
Posted 22 Apr

django.txt
Text

Announcement: 'Dear Students Today No Class'
Naresh Technologies
Created 21 Apr21 Apr
Dear Students 

Today No Class
Material
Mahesh Python posted a new material: 19/4/25(Django Forms)
Posted 19 Apr

django.txt
Text
Material
Mahesh Python posted a new material: 18/4/25(Models)
Posted 18 Apr

django.txt
Text

django.txt
Text
Material
Mahesh Python posted a new material: 17/4/25(Models)
Posted 17 Apr

django.txt
Text
Password Hashers:
----------------------------
The default password hasher:pbkdf2_sha256
We can use other more secured password hashers also
bcrypt, argon2 etc....

>>>pip install bcrypt
>>>pip install django[argon2]

More secured algorithm is argon2 followed by bcrypt and then sha256.

In settings.py we have to configure password hashers as:

PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.Argon2PasswordHasher',
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
    'django.contrib.auth.hashers.BCryptPasswordHasher',
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
]