CHAPTER-4:Working with Models & Databases
=========================================
-->As part of web application development, compulsory we required to interact with database to store our data and to retrieve our stored data.
-->Django provides a in-built support for database operations. Django provides one in-built database sqlite3.
-->For small to medium applications this DB is enough. Django can provide support for other DB also like Oracle,Mysql,MongoDB etc....

Database Configuration:
------------------------------------
The default sqlite3 configuration in settings.py file are declared as:

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

Database connection with Mysql
-------------------------------------------------
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'djangodb',
        'USER':'root',
        'PASSWORD':'root',
        'HOST':'localhost',
        'PORT':3306
    }
}

Database connection with Oracle:
---------------------------------------------------
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.oracle',
        'NAME': 'ORCL',
        'USER':'scott',
        'PASSWORD':'tiger',
        'HOST':'localhost',
        'PORT':1521
    }
}

-->If we dont want to use sqlite3 database then we have to configure our own database with the following parameters.
		1).ENGINE:Name ofthe database engine
		2).NAME:Database name
		3).USER:Database login user name
		4).PASSWORD:Database login password
		5).HOST:The machine on which database server is running
		6).PORT:THe port number on which databse server is running
Note:
	Most of the time HOST & PORT are optional.

How to check Djangodatabase connection
----------------------------------------------------------------
-->We can check whether django database configurations are properly configured or not by using the following command from the shell.

D:\DJANGO_26MAR_4PM\maheshproject>py manage.py shell
>>> from django.db import connection
>>> c = connection.cursor()

-->If we are not getting any error means our DB configurations are proper.

Model Class:
-------------------
-->A model is a python class which contains database information.
-->It contains fields and behaviours of the data what we are storing.
-->Each model maps to one database table.
-->Every model is a python class which is the child class of (django.db.models.Model)
-->Each attribute of the model represents database field(column name in table).
-->We have to write model classes inside models.py file.

App
------
django-admin startproject modelproject
py manage.py startapp testapp
Add app in settings.py

models.py
----------------
class Employee(models.Model):
    eno = models.IntegerField()
    ename = models.CharField(max_length=30)
    esal = models.FloatField()
    eaddr = models.CharField(max_length=30)

Note:
	This model class will be converted into database table. Django is responsible for this conversion.

table_name	:appname_classname
					:testap_employee
Fields:eno,ename,esal,eaddr and one extra field:id
Behaviours:eno is integer, ename is char.
Model class = Database table name + field name + field behaviours

Converting Model class into Database specific SQL code:
--------------------------------------------------------------------------------------
Once we create Model class, we have to migrate the corresponding SQL code, for this we have to use makemigrations
					py manage.py makemigrations

How to see the corresponding SQL code of migrations:
-----------------------------------------------------------------------------------
D:\DJANGO_26MAR_4PM\modelproject>py manage.py sqlmigrate testapp 0001
BEGIN;
--
-- Create model Employee
--
CREATE TABLE "testapp_employee" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "eno" integer NOT NULL, "ename" varchar(30) NOT NULL, "esal" real NOT NULL, "eaddr" varchar(30) NOT NULL);
COMMIT;

How to execute generated SQL code(migrate command):
--------------------------------------------------------------------------------------
After generating SQL code, we have to execute that sql code to create table in database. For this we have to use 'migrate' command
						py manage.py migrate

Q.What is the advantage of creating tables with 'migrate' command?
-------------------------------------------------------------------------------------------------------
If we use 'migrate' command, then all django required tables will be created in addition to our application specific tables. If we create table manually with sql code, then only our application specific table will be created and django may not work properly. Hence it is highly recommended to create tables with 'migrate' command.

How to check created table in Django admin interface:
-----------------------------------------------------------------------------------
We have to register model class in 'admin.py' file

admin.py
--------------
from testapp.models import Employee
admin.site.register(Employee)

Creation of super user to login to admin interface:
----------------------------------------------------------------------------
We can create super user by using the command:
				py manage.py createsuperuser

Q.Difference between makemigrations and migrate?
------------------------------------------------------------------------------
'makemigrations' is responsible to generate SQL code for python model class where as 'migrate' is responsible to execute the SQL code so that tables will be created in the database.

Read data from the database and display for the end user?
-----------------------------------------------------------------------------------------
1).Start project
2).Start app
3).Add app in settings.py
4).Add database configurations in settings.py
5).Test database connections
6).Create Model class
7).Makemigrations and migrate
8).Register model and modeladmin inside admin.py
9).createsuperuser
10).login to admin interface and check table created or not
11).Template file and static file and corresponding configurations in settings.py
12).view function to communicate with database and to get data and send this data to template file which is responsible to display to end user.

App:
-------
django-admin startproject modelproject2
py manage.py startapp testapp
Add app in settings.py

models.py
---------------
class Employee(models.Model):
    eno = models.IntegerField()
    ename = models.CharField(max_length=30)
    esal = models.FloatField()
    eaddr = models.CharField(max_length=30)

makemigrations and migrate

admin.py
--------------
from testapp.models import Employee
class EmployeeAdmin(admin.ModelAdmin):
    list_display = ['eno','ename','esal','eaddr']
admin.site.register(Employee,EmployeeAdmin)

create super user

views.py
-------------
from testapp.models import Employee
def emp_data_view(request):
    emp_list = Employee.objects.all()#select * from employee
    my_dict = {'emp_list':emp_list}
    return render(request,'testapp/emp.html',my_dict)

emp.html
---------------
<body>
    <h1>Employee List</h1>
    {% if emp_list %}
        <table border="3">
            <thead>
                <th>ENO</th>
                <th>ENAME</th>
                <th>ESAL</th>
                <th>EADDR</th>
            </thead>
    {% for emp in emp_list %}
            <tr>
                <td>{{emp.eno}}</td>
                <td>{{emp.ename}}</td>
                <td>{{emp.esal}}</td>
                <td>{{emp.eaddr}}</td>
            </tr>
    {% endfor %}
        </table>
    {% else %}
		<p>No Records Found!!!!</p>
    {% endif %}
</body>

emp1.css
--------------
body{
    background:yellow;
    color:red;
}
h1{
    text-align:center;
}
table{
    margin:auto;
}
Questions related to models and templates
-----------------------------------------------------------------
1).How to configure database inside settings.py?
2).How to check the connections?
3).How t define model class inside models.py?
4).How to perform makemigrations?
5).How to perform migrate?
6).What is the difference between makemigrations and igrate?
7).What is advantage of creating table by using migrate command instead of creating manually in the database?
8).How to add model to admin interface in admin.py?
9).To display total data, how to write model admin class inside admin.py?
10).How to create super user?
11).How to login to admin interface and add data to our table?
12).How to see the generated sql code as result of makemigrations?

How to generate fake data for application?
----------------------------------------------------------------
faker ----> module
Faker -----> Class

pip install faker

Ex:
-----
from faker import Faker
fakegen = Faker()
name = fakegen.name()
print(name)
fname = fakegen.first_name()
print(fname)
lname = fakegen.last_name()
print(lname)
date1 = fakegen.date()
print(date1)
number = fakegen.random_number(5)     
print(number)
email1 = fakegen.email()
print(email1)
city = fakegen.city()
print(city)
print(fakegen.random_int(min=0,max=9999))
print(fakegen.random_element(elements=('sunny','bunny','vinny','chinny','pinny')))

Phone Number Generation:
-----------------------------------------
from random import *
def phonenumbergen():
	d1 = randint(6,9)
	num = '' + str(d1)
	for i in range(9):
		num += str(randint(0,9))
	return int(num)
for i in range(10):
	print(phonenumbergen())

Insert data into model class by using faker module
-----------------------------------------------------------------------------
django-admin startproject modelproject3
py manage.py startapp testapp
Add app in settings.py
Database configuration(Use Mysql)
Create a database in Mysql(studentdb)

settings.py
----------------
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'studentdb',
        'USER':'root',
        'PASSWORD':'root'
    }
}

models.py
---------------
class Student(models.Model):
    rollno = models.IntegerField()
    name = models.CharField(max_length=64)
    dob = models.DateField()
    marks = models.IntegerField()
    email = models.EmailField()
    phonenumber = models.BigIntegerField()
    address = models.TextField()

makemigrations and migrate

admin.py
---------------
from testapp.models import Student
class StudentAdmin(admin.ModelAdmin):
    list_display = ['rollno','name','dob','marks','email','phonenumber','address']
admin.site.register(Student,StudentAdmin)
