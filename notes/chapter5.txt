CHAPTER-5:Working with Django Forms
====================================
Django Forms:
----------------------
-->The main purpose of forms is to take user input.
Ex:
		loginform, registration form, feedback form ec....
-->From the forms we can read end user provided input data and we can use that data based on requirement. We can store in the database for future purpose. We may use just for validation/authetication purpose.
-->Here we have to use django specific forms but not HTML forms.

Advantages of Django Forms over HTML forms:
-----------------------------------------------------------------------
1).We can develop forms very easily with python code.
2).We can develop HTML Form widgets/components (like text area,email,pwd etc)
very quickly.
3).Validating data will become very easy.
4).Processing data into python datastructures like list, set etc will become easy.
5).Creation of Models nased forms will become easy etc....

model class ---> Converted into database table
form class ---> Converted into HTML form
Process to generate Django Forms:
-----------------------------------------------------
django-admin startproject formproject
py manage.py startapp testapp
Add app in settings.py

Step1:Creation of forms.py file in our application folder with our required fields.
forms.py
-------------
from django import forms
class StudentForm(forms.Form):
    name = forms.CharField()
    marks = forms.IntegerField()

Note:
	name and marks are the field names which will be available in HTML form.
					forms.py======>views.py=======>Template file(HTML)

Step-2:Usage of forms.py inside vews.py file
-------------------------------------------------------------------
views.py
------------
from testapp.forms import StudentForm
def student_input_view(request):
    form = StudentForm()
    my_dict = {'form':form}
    return render(request,'testapp/input.html',my_dict)

Step-3:Creation of HTML file to hold form
-----------------------------------------------------------------
Inside template file we have to use template tag to inject form {{form}}

input.html
----------------
<body>
    <h1>Student Input Form</h1>
    <div class="container">
        <form method="post" align="center">
           {{form.as_p}}
            <input type="submit" name="" value="Submit">
        </form>
    </div>
</body>

-->If we submit this form we will get 403 status code response
Forbidden (403)
CSRF verification failed. Request aborted.

CSRF(Cross Site Request Forgery) Token:
---------------------------------------------------------------
-->Every form should satisfy CSRF verification, otherwise Django won't accept our form.
-->It is meant for website security. Being a programmer we are not required to worry anything about this.Django will take care everything.
-->But we have to add csrf_token in our form
				{{form.as_p}}
				{% csrf_token %}

How to process input data from the form inside views.py file
-------------------------------------------------------------------------------------------
Inside views.py, we have to read data provided by end user and we have to use that data based on our requirement.

	form = StudentForm()--->Empty form object to display form to the end user.
	form = StudentForm(request.POST)--->This form object contains end user provided data
		
cleaned_data ---> dictionary which contains end user provided data.
form.cleanded_data['name']-->The name entered by end user
form.cleanded_data['marks']-->The marks entered by end user

form.is_valid() ---> To check whether validations are successful or not

Difference between GET & POST:
--------------------------------------------------
There are multiple ways to send GET request:
	-->Typing URL in the address bar and enter.
	-->Clicking on hyperlinks
	-->Submitting the HTML FORM without method attribute
	-->Submitting the HTML FORM with method attribute of GET value.

There is only one way to send POST request
	-->Submitting the HTML FORM with method attribute of POST value.

DJANGO @ 4:00 PM | Mr.Mahesh [24th March]
Mr.Mahesh
Upcoming
Woohoo, no work due in soon!
Material
Mahesh Python posted a new material: 19/4/25(Django Forms)
Posted 17:42

django.txt
Text
Material
Mahesh Python posted a new material: 18/4/25(Models)
Posted Yesterday

django.txt
Text

django.txt
Text
Material
Mahesh Python posted a new material: 17/4/25(Models)
Posted 17 Apr

django.txt
Text
Material
Mahesh Python posted a new material: 16/4/25(Models)
Posted 16 Apr

django.txt
Text
Material
Mahesh Python posted a new material: 15/4/25(Fake Data Generation)
Posted 15 Apr

django.txt
Text

Announcement: 'Hi, There is No Class Today [14-04-2025]'
Naresh Technologies
Created 14 Apr14 Apr
Hi,

There is No Class Today [14-04-2025]
Material
Mahesh Python posted a new material: 12/14/25(Models)
Posted 12 Apr

django.txt
Text

Announcement: 'Hi, There is No Class Today [11-04-2025]'
Naresh Technologies
Created 11 Apr11 Apr
Hi,

There is No Class Today [11-04-2025]
Material
Mahesh Python posted a new material: 10/4/25(Models)
Posted 10 Apr

django.txt
Text
Material
Mahesh Python posted a new material: 9/4/25(Models)
Posted 9 Apr

django.txt
Text
views.py
------------
def student_input_view(request):
    submitted = False
    sname = ''
    if request.method == 'POST':
        form = StudentForm(request.POST)
        if form.is_valid():
            print('Form Validation success and print data')
            print('RollNo:',form.cleaned_data['rollno'])
            print('Name:',form.cleaned_data['name'])
            print('Marks:',form.cleaned_data['marks'])
            sname = form.cleaned_data['name']
            submitted = True
    form = StudentForm()
    return render(request,'testapp/input.html', {'form':form, 'submitted':submitted, 'sname':sname})

input.html
-----------------
<body>
    <div class="container" align="center">
        {% if submitted %}
        <h1>Student with the name:{{sname}} processed successfully</h1>
        <h2>Enter next student information</h2><hr>
        {% else %}
        <h1>Student Input Form</h1>
        {% endif %}
        <form method="post" align="center">
           {{form.as_p}}
           {% csrf_token %}
            <input type="submit" name="" value="Submit">
        </form>
    </div>
</body>

feedback project
--------------------------
django-admin startproject feedbackproject
py manage.py startapp testapp
Add app in settings.py

forms.py
-------------
from django import forms
class FeedBackForm(forms.Form):
    name = forms.CharField()
    rollno = forms.IntegerField()
    email = forms.EmailField()
    feedback = forms.CharField(widget=forms.Textarea)

views.py
-------------
def feedback_view(request):
    submitted = False
    name = ''
    if request.method == 'POST':
        form = FeedBackForm(request.POST)
        if form.is_valid():
            print('Form validation success and printing feedback information')
            print('*'*55)
            print('Name:',form.cleaned_data['name'])
            print('RollNo:',form.cleaned_data['rollno'])
            print('Mail ID:',form.cleaned_data['email'])
            print('Feedback:',form.cleaned_data['feedback'])
            submitted = True
            name = form.cleaned_data['name']
    form = FeedBackForm()
    return render(request,'testapp/feedback.html', {'form':form, 'submitted':submitted,'name':name})

feedback.html
----------------------
<body>
    <div class="container" align="center">
        {% if submitted %}
        <h1>Hello {{name}}, Thanks for providing feedback,
		it is very helpful for us to provide better service</h1>
        {% else %}
        <h1>Student Feedback Form</h1>
        <form method="post">
            {{form.as_p}}
            {% csrf_token %}
            <input type="submit" value="SubmitFeedback">
        </form>
        {% endif %}
    </div>
</body>


DJANGO @ 4:00 PM | Mr.Mahesh [24th March]
Mr.Mahesh
Upcoming
Woohoo, no work due in soon!
Material
Mahesh Python posted a new material: 22/4/25(Form Validations)
Posted 17:36

django.txt
Text

Announcement: 'Dear Students Today No Class'
Naresh Technologies
Created YesterdayYesterday
Dear Students 

Today No Class
Material
Mahesh Python posted a new material: 19/4/25(Django Forms)
Posted 19 Apr

django.txt
Text
Material
Mahesh Python posted a new material: 18/4/25(Models)
Posted 18 Apr

django.txt
Text

django.txt
Text
Material
Mahesh Python posted a new material: 17/4/25(Models)
Posted 17 Apr

django.txt
Text
Material
Mahesh Python posted a new material: 16/4/25(Models)
Posted 16 Apr

django.txt
Text
Material
Mahesh Python posted a new material: 15/4/25(Fake Data Generation)
Posted 15 Apr

django.txt
Text

Announcement: 'Hi, There is No Class Today [14-04-2025]'
Naresh Technologies
Created 14 Apr14 Apr
Hi,

There is No Class Today [14-04-2025]
Material
Mahesh Python posted a new material: 12/14/25(Models)
Posted 12 Apr

django.txt
Text

Announcement: 'Hi, There is No Class Today [11-04-2025]'
Naresh Technologies
Created 11 Apr11 Apr
Hi,

There is No Class Today [11-04-2025]
Stream
Form Validatons:
--------------------------
-->We can implement validation ogic by using 2-ways
	1.Explicitly by the programmer by using clean methods
	2.By using django in-built validators

Basic OOP's knowledge
-----------------------------------
class Parent:
	def __init__(self):
		self.x = 333
	def property(self):
		print('gold + land + cash')
class Child(Parent):
	def education(self):
		print('B-Tech qualification + Job')
c = Child()
c.education()
c.property()
print(c.x)

Ex:
-----
class Form:
	def __init__(self):
		self.cleaned_data = {'name':'mahesh'}
class FeedBackForm(forms.Form):
    name = forms.CharField()
    rollno = forms.IntegerField()
    email = forms.EmailField()
    feedback = forms.CharField(widget=forms.Textarea)

form = FeedBackForm()
form.cleaned_data['name']

Ex:
-----
class Parent:
	def property(self):
		print('gold + land + cash + power')
	def marry(self):
		print('Appalamma')
class Child(Parent):
	def marry(self):
		super().marry()
		print('Katrina Kaif')
c = Child()
c.property()
c.marry()

1.Explicitly by the programmer by using clean methods
------------------------------------------------------------------------------------
Syn:	clean_fieldname(self)

-->In the Form class, for any field, if we define clean method, then at the time of submit this form, django will call this methods automatically to perform validations. If clean method wont raise any error then only request will be processed.

forms.py
-------------
class FeedBackForm(forms.Form):
    All fields
    
	def clean_name(self):
        print('Validaning Name Field')
        input_name = self.cleaned_data['name']
        if len(input_name) < 4:
            raise forms.ValidationError('The minimum number of characters in the name filed should be 4')
        return input_name
	def clean_rollno(self):
        print('Validating RollNo Field')
        input_rollno = self.cleaned_data['rollno']
        return input_rollno
    def clean_email(self):
        print('Validating Email Field')
        input_email = self.cleaned_data['email']
        return input_email
    def clean_feedback(self):
        print('Validating Feedback Field')
        input_feedback = self.cleaned_data['feedback']
        return input_feedback
		
Note:
	Django will call these field level clean methods automatically and we are not required to call these methods explicitly. The names are fixed because these are understandable by Django.

2).By using django in-built validators:
---------------------------------------------------------
-->Django provides several in-built validators to perform very common validations. We can use directly and we are not responsible to implement those. 
All inbuilt validators present in django.core module.

forms.py
-------------
from django.core import validators
class FeedBackForm(forms.Form):
	--------
	feedback = forms.CharField(widget=forms.Textarea,validators=[
	validators.MaxLengthValidator(40),validators.MinLengthValidator(10)])

How to implement custom validators by using same validators parameter?
----------------------------------------------------------------------------------------------------------------
The name should be starts with 's'
----------------------------------------------------
def starts_with_s(value):
    print('starts_with_s function execution')
    if value[0].lower() != 's':
        raise forms.ValidationError('Name should be starts with s or S')

class FeedBackForm(forms.Form):
    name = forms.CharField(validators=[starts_with_s])

mail should contains @gmail.com
---------------------------------------------------
mail = 'mahesh@gmail.com'
print(mail[-10:])

def gmail_validation(value):
    print('Checking for gmail validation')
    if value[-10:] != '@gmail.com':
        raise forms.ValidationError('Mail extension should be gmail')

class FeedBackForm(forms.Form):
    email = forms.EmailField(validators=[gmail_validation])
Validating of total form directly by using single clean() method:
------------------------------------------------------------------------------------------------
We are not required to write separate field level methods. Inside single clean() method all validations we can perform.

    def clean(self):
        print('Total Form Validations......')
        total_cleaned_data = super().clean()
        print('Validating Name')
        input_name = total_cleaned_data['name']
        if input_name[0].lower() != 's':
            raise forms.ValidationError('Name should be starts with s')
        print('Validating Rollno')
        input_rollno = total_cleaned_data['rollno']
        if input_rollno <= 0:
            raise forms.ValidationError('Rollno should be > 0')
        print('Validating Email')
        input_email = total_cleaned_data['email']
        if input_email[-10:] != '@gmail.com':
            raise forms.ValidationError('Email extension should be gmail')

-->If we want to validate multiple field values together, then single clean() method is the best choice.

How to check original pwd and re-entered pwd are same or not?
------------------------------------------------------------------------------------------------
class FeedBackForm(forms.Form):
    password = forms.CharField(label="Enter Password",widget=forms.PasswordInput)
    rpassword=forms.CharField(label="Password(Again)",widget=forms.PasswordInput)

    def clean(self):
        total_cleaned_data = super().clean()
        pwd = total_cleaned_data['password']
        rpwd = total_cleaned_data['rpassword']
        if pwd != rpwd:
            raise forms.ValidationError('Both passwords must be same.....')

How to prevent request from BOT:
----------------------------------------------------
-->Generally form requests can be send by end user. Sometimes we can write automated programming script which is responsible to fill the form and submit. This automated programming script is nothing but BOT.

The main objectives of BOT requests are:
	1).To create unneccessary heavy traffic to the website, which may crash our application.
	2).To spread malware(viruses)

-->Being a developer compulsory we have to think about BOT requests ad we have to prevent this requests.

How to prevent BOT request:
--------------------------------------------
-->In the form we will place one hidden field, which is not visible to the end user, Hence there is no chance of providing value to this hidden field.
-->But BOT will send the value for this hidden field also. If hidden field got some value means it is the request from BOT and prevent that submission.

forms.py
-------------
class FeedBackForm(forms.Form):
    bot_handler = forms.CharField(required=False,widget=forms.HiddenInput)

    def clean(self):
        total_cleaned_data = super().clean()
        bot_handler_value = total_cleaned_data['bot_handler']
        if len(bot_handler_value) > 0:
            raise forms.ValidationError("Request from BOT.....can't be submitted")